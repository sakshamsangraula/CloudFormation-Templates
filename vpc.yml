AWSTemplateFormatVersion: 2010-09-09

Parameters:

#ask the user to input the CidrBlock for VPC

 VPCCidrBlock:
  Description: Please provide the Cidr Block for the VPC
  Type: String
  AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
  ConstraintDescription: The CidrBlock entered must be valid (in the format x.x.x.x/x)
  Default: 10.192.0.0/16

#ask the user to input the CidrBlock for the Public Subnet

 PublicSubnetCidrBlock:
  Description: Please provide the Cidr Block for the Public Subnet
  Type: String
  AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
  ConstraintDescription: The CidrBlock entered must be valid (in the format x.x.x.x/x)
  Default: 10.192.10.0/24

#ask the user to input the CidrBlock for the Private Subnet

 PrivateSubnetCidrBlock:
  Description: Please provide the Cidr Block for the VPC
  Type: String
  AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
  ConstraintDescription: The CidrBlock entered must be valid (in the format x.x.x.x/x)
  Default: 10.192.20.0/24

#ask the user to provide a key name to authenticate to the EC2 instance
 KeyPairName: 
  Description: Please provide the name of the key pair you will use to authenicate to the EC2 instance
  Type: AWS::EC2::KeyPair::KeyName


# ask the user for database username
DBUserName:
 Description: Provide master username
 Type: String

Resources:

#create a VPC
 MyVPC:
  Type: AWS::EC2::VPC
  Properties: 
   CidrBlock: !Ref VPCCidrBlock
   EnableDnsHostnames: true
   InstanceTenancy: default
   Tags:
    - Key: Name
      Value: !Sub ${AWS::StackName} VPC

#create an Internet Gateway
 MyIGW:
  Type: AWS::EC2::InternetGateway
  Properties:
   Tags:
    - Key: Name
      Value: !Sub ${AWS::StackName} Internet Gateway

# attach the internet gateway to the VPC
 AttachIGWtoVPC:
  Type: AWS::EC2::VPCGatewayAttachment
  Properties: 
   InternetGatewayId: !Ref MyIGW
   VpcId: !Ref MyVPC

#create a public subnet
 PublicSubnet:
  Type: AWS::EC2::Subnet
  Properties:
  # the 1st availability zone in the region where the cloudformation template is created will be used 
   AvailabilityZone: !Select [0, !GetAZs '']
   CidrBlock: !Ref PublicSubnetCidrBlock
   #allow public IP addresses to be used
   MapPublicIpOnLaunch: true
   VpcId: !Ref MyVPC
 

 
#create a private subnet
 PrivateSubnet:
  Type: AWS::EC2::Subnet
  Properties:
    # the 2nd availability zone in the region where the cloudformation template is created will be used 
   AvailabilityZone: !Select [1, !GetAZs '']
   CidrBlock: !Ref PrivateSubnetCidrBlock
# do not allow public ip addresses to be used in this subnet 
   MapPublicIpOnLaunch: false
   VpcId: !Ref MyVPC
   

# create a route table for the public subnet so that the source of 0.0.0.0/0 goes to the internet gateway
# the route table already has a route configured to destination local when the source is the VPC CidrIp meaning
# that when the traffic is within the VPC's CidrBlock then the traffic is route within the VPC else the traffic will go to IGW
 PublicSubnetRouteTable:
  Type: AWS::EC2::RouteTable
  Properties: 
   VpcId: !Ref MyVPC


# create a route to the internet gateway
 PublicSubnetRoute:
  Type: AWS::EC2::Route
  Properties:
   RouteTableId: !Ref PublicSubnetRouteTable
   DestinationCidrBlock: 0.0.0.0/0
   GatewayId: !Ref MyIGW
  

###############################################################################
# this attaches the public subnet to the route table

 AttachPublicSubnetToRoute:
  Type: AWS::EC2::SubnetRouteTableAssociation
  Properties:
   RouteTableId: !Ref PublicSubnetRouteTable
   SubnetId: !Ref PublicSubnet

# create an elastic IP address for NAT Gateway
 NATGatewayEIP:
  Type: AWS::EC2::EIP
  DependsOn: AttachIGWtoVPC
  Properties:
   Domain: vpc

  #create a NAT Gateway in the public subnet
 NATGateway1:
  Type: AWS::EC2::NatGateway
  Properties:
    AllocationId: !GetAtt NATGatewayEIP.AllocationId
    SubnetId: !Ref PublicSubnet



  #create a route table for NAT Gateway
 NATGatewayRouteTable:
  Type: AWS::EC2::RouteTable
  Properties:
    VpcId: !Ref MyVPC


# create a route to the NAT gateway
 #PrivateSubnetRoute:
  #Type: AWS::EC2::Route
  #Properties:
    #RouteTableId: !Ref NATGatewayRouteTable
    #DestinationCidrBlock: 0.0.0.0/0
    #GatewayId: !Ref NATGateway1
   


# make sure that the private subnet has the route to the NAT gateway
 #AttachPrivateSubnetToRoute:
  #Type: AWS::EC2::SubnetRouteTableAssociation
  #Properties:
    #RouteTableId: !Ref NATGatewayRouteTable
    #SubnetId: !Ref PrivateSubnet
   


  #create a security group
 MySG:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: This security group allows communication on any port
    SecurityGroupIngress:
     - IpProtocol: tcp
       CidrIp: 0.0.0.0/0
       FromPort: 22
       ToPort: 22
    VpcId: !Ref MyVPC

   
###################################################################################################


# added 2 EC2 instances and created a MYSQL database


###############################################################################################
# create an EC2 instance in a public subnet
 PublicWebServer:
  Type: AWS::EC2::Instance
  Properties:
   ImageId: ami-0fc61db8544a617ed 
   InstanceType: t2.micro
   KeyName: !Ref KeyPairName
   SubnetId: !Ref PublicSubnet
   SecurityGroupIds: [ !Ref MySG ]
   # associate this instance to the newly created security group

   
# create an EC2 instance in a private subnet
 PublicWebServer:
  Type: AWS::EC2::Instance
  Properties:
   ImageId: ami-0fc61db8544a617ed 
   InstanceType: t2.micro
   KeyName: !Ref KeyPairName
   SubnetId: !Ref PrivateSubnet
   # associate this instance to the newly created security group


# create a database 
 MyDB:
  Type: AWS::RDS::DBInstance
  Properties: 
   AllocatedStorage: 100
   DBInstanceClass: db.m1
   DBName: "My private database"
   DeletionProtection: false
   MasterUserName: !Ref DBUserName
   Engine: MySQL
